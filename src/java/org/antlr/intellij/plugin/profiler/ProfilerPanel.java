package org.antlr.intellij.plugin.profiler;

import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.antlr.v4.runtime.atn.DecisionInfo;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.util.LinkedHashMap;

public class ProfilerPanel {
	protected JPanel outerPanel;
	protected JTextArea inputDisplayPane;
	protected JBTable profilerDataTable;
	protected JScrollPane inputDisplayScrollPane;
	protected JSplitPane splitPane;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		outerPanel = new JPanel();
		outerPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		splitPane = new JSplitPane();
		splitPane.setDividerSize(7);
		outerPanel.add(splitPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
		inputDisplayScrollPane = new JScrollPane();
		splitPane.setRightComponent(inputDisplayScrollPane);
		inputDisplayPane = new JTextArea();
		inputDisplayScrollPane.setViewportView(inputDisplayPane);
		final JScrollPane scrollPane1 = new JScrollPane();
		splitPane.setLeftComponent(scrollPane1);
		profilerDataTable = new JBTable();
		scrollPane1.setViewportView(profilerDataTable);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return outerPanel;
	}

	public static class DataModel extends AbstractTableModel {
		public Object[][] data;
		public String[] columnNames;

		public DataModel(Object[][] data, String[] columnNames) {
			this.data = data;
			this.columnNames = columnNames;
		}

		public String getColumnName(int column) {
			return columnNames[column];
		}

		public int getRowCount() {
			return data.length;
		}

		public int getColumnCount() {
			return columnNames.length;
		}

		public Object getValueAt(int row, int col) {
			return data[row][col];
		}

		public boolean isCellEditable(int row, int column) {
			return true;
		}

		public void setValueAt(Object value, int row, int col) {
			data[row][col] = value;
			fireTableCellUpdated(row, col);
		}
	}

	public static class ProfilerTableDataModel extends AbstractTableModel {
		public DecisionInfo[] decisionInfo;
		public LinkedHashMap<String, Integer> nameToColumnMap = new LinkedHashMap<String, Integer>();
		public static final String[] columnNames = {
			"Decision", "Invocations", "Full context", "Total k", "Min k", "Max k",
			"DFA k", "SLL-ATN k", "LL-ATN k", "Predicates"
		};

		public ProfilerTableDataModel(DecisionInfo[] decisionInfo) {
			this.decisionInfo = decisionInfo;
			for (int i = 0; i < columnNames.length; i++) {
				nameToColumnMap.put(columnNames[i], i);
			}
		}

		public String getColumnName(int column) {
			return columnNames[column];
		}

		public int getRowCount() {
			return decisionInfo.length;
		}

		public int getColumnCount() {
			return columnNames.length;
		}

		public Object getValueAt(int row, int col) {
			switch (col) {
				case 0:
					return decisionInfo[row].decision;
				case 1:
					return decisionInfo[row].invocations;
				case 2:
					return decisionInfo[row].LL_Fallback;
				case 3:
					return decisionInfo[row].totalLook;
				case 4:
					return decisionInfo[row].minLook;
				case 5:
					return decisionInfo[row].maxLook;
				case 6:
					return decisionInfo[row].DFATransitions;
				case 7:
					return decisionInfo[row].SLL_ATNTransitions;
				case 8:
					return decisionInfo[row].LL_ATNTransitions;
				case 9:
					return decisionInfo[row].predicateEvals.size();
			}
			return "n/a";
		}
	}

	public ProfilerPanel() {
		String dataValues[][] =
			{
				{"12", "234", "67"},
				{"-123", "43", "853"},
				{"93", "89.2", "109"},
				{"279", "9033", "3092"}
			};
//		profilerDataTable.setModel(new DataModel(dataValues, new String[]{"a", "b", "c"}));
	}

	public JTextArea getInputDisplayPane() {
		return inputDisplayPane;
	}

	public JBTable getProfilerDataTable() {
		return profilerDataTable;
	}

	public void setProfilerData(DecisionInfo[] info) {
		profilerDataTable.setModel(new ProfilerTableDataModel(info));
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
	}
}
