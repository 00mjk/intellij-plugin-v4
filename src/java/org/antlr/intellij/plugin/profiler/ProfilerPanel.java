package org.antlr.intellij.plugin.profiler;

import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.antlr.v4.runtime.atn.ParseInfo;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.LinkedHashMap;

public class ProfilerPanel {
	protected JPanel outerPanel;
	protected JTextArea inputDisplayPane;
	protected JBTable profilerDataTable;
	protected JScrollPane inputDisplayScrollPane;
	protected JSplitPane splitPane;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		outerPanel = new JPanel();
		outerPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		splitPane = new JSplitPane();
		splitPane.setDividerLocation(489);
		splitPane.setDividerSize(7);
		outerPanel.add(splitPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(800, 400), null, 0, false));
		inputDisplayScrollPane = new JScrollPane();
		splitPane.setRightComponent(inputDisplayScrollPane);
		inputDisplayPane = new JTextArea();
		inputDisplayScrollPane.setViewportView(inputDisplayPane);
		final JScrollPane scrollPane1 = new JScrollPane();
		splitPane.setLeftComponent(scrollPane1);
		profilerDataTable.setPreferredScrollableViewportSize(new Dimension(800, 400));
		scrollPane1.setViewportView(profilerDataTable);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return outerPanel;
	}

	public static class ProfilerTableDataModel extends AbstractTableModel {
		public ParseInfo parseInfo;
		public LinkedHashMap<String, Integer> nameToColumnMap = new LinkedHashMap<String, Integer>();
		public static final String[] columnNames = {
			"Decision", "Invocations", "Time (ns)", "# DFA states", "Full context", "Total k", "Min k", "Max k",
			"DFA k", "SLL-ATN k", "LL-ATN k", "Predicates"
		};

		public static final String[] columnToolTips = {
			"Decision", "Invocations", "Time (ns)", "# DFA states", "Full context", "Total k", "Min k", "Max k",
			"DFA k", "SLL-ATN k", "LL-ATN k", "Predicates"
		};

		public ProfilerTableDataModel(ParseInfo parseInfo) {
			this.parseInfo = parseInfo;
			for (int i = 0; i < columnNames.length; i++) {
				nameToColumnMap.put(columnNames[i], i);
			}
		}


		public String getColumnName(int column) {
			return columnNames[column];
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return Integer.class;
		}

		public int getRowCount() {
			return parseInfo.getDecisionInfo().length;
		}

		public int getColumnCount() {
			return columnNames.length;
		}

		public Object getValueAt(int row, int col) {
			int decision = row;
			switch (col) { // laborious but more efficient than reflection
				case 0:
					return parseInfo.getDecisionInfo()[decision].decision;
				case 1:
					return parseInfo.getDecisionInfo()[decision].invocations;
				case 2:
					return parseInfo.getDecisionInfo()[decision].timeInPrediction;
				case 3:
					return parseInfo.getDFASize(decision);
				case 4:
					return parseInfo.getDecisionInfo()[decision].LL_Fallback;
				case 5:
					return parseInfo.getDecisionInfo()[decision].totalLook;
				case 6:
					return parseInfo.getDecisionInfo()[decision].minLook;
				case 7:
					return parseInfo.getDecisionInfo()[decision].maxLook;
				case 8:
					return parseInfo.getDecisionInfo()[decision].DFATransitions;
				case 9:
					return parseInfo.getDecisionInfo()[decision].SLL_ATNTransitions;
				case 10:
					return parseInfo.getDecisionInfo()[decision].LL_ATNTransitions;
				case 11:
					return parseInfo.getDecisionInfo()[decision].predicateEvals.size();
			}
			return "n/a";
		}
	}

	public JTextArea getInputDisplayPane() {
		return inputDisplayPane;
	}

	public JBTable getProfilerDataTable() {
		return profilerDataTable;
	}

	public void setProfilerData(ParseInfo parseInfo) {
		ProfilerTableDataModel model = new ProfilerTableDataModel(parseInfo);
		profilerDataTable.setModel(model);
		profilerDataTable.setRowSorter(new TableRowSorter<ProfilerTableDataModel>(model));
		JTableHeader tableHeader = profilerDataTable.getTableHeader();
//		tableHeader.setDefaultRenderer();
	}

	private void createUIComponents() {
		profilerDataTable = new JBTable() {
			@Override
			protected JTableHeader createDefaultTableHeader() {
				return new JTableHeader(columnModel) {
					public String getToolTipText(MouseEvent e) {
						Point p = e.getPoint();
						int index = columnModel.getColumnIndexAtX(p.x);
						int realIndex =
							columnModel.getColumn(index).getModelIndex();
						return ProfilerTableDataModel.columnToolTips[realIndex];
					}
				};
			}
		};
		JTableHeader header = profilerDataTable.getTableHeader();
		header.setDefaultRenderer(new HeaderRenderer(profilerDataTable));
	}

	static class HeaderRenderer implements TableCellRenderer {

	    DefaultTableCellRenderer renderer;

	    public HeaderRenderer(JTable table) {
	        renderer = (DefaultTableCellRenderer)
	            table.getTableHeader().getDefaultRenderer();
	        renderer.setHorizontalAlignment(JLabel.RIGHT);
	    }

	    @Override
	    public Component getTableCellRendererComponent(
	        JTable table, Object value, boolean isSelected,
	        boolean hasFocus, int row, int col) {
	        return renderer.getTableCellRendererComponent(
	            table, value, isSelected, hasFocus, row, col);
	    }
	}
}
